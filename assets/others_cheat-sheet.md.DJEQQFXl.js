import{_ as e,c as l,o as d,ag as a}from"./chunks/framework.B1Kupp1q.js";const f=JSON.parse('{"title":"命令速查表","description":"","frontmatter":{},"headers":[],"relativePath":"others/cheat-sheet.md","filePath":"others/cheat-sheet.md"}'),i={name:"others/cheat-sheet.md"};function o(g,t,r,c,n,s){return d(),l("div",null,t[0]||(t[0]=[a('<h1 id="命令速查表" tabindex="-1">命令速查表 <a class="header-anchor" href="#命令速查表" aria-label="Permalink to &quot;命令速查表&quot;">​</a></h1><p>经过几天的学习，相信你对 Git 已经初步掌握。一开始，可能觉得 Git 上手比较困难，尤其是已经熟悉 SVN 的同学，没关系，多操练几次，就会越用越顺手。</p><p>Git 虽然极其强大，命令繁多，但常用的就那么十来个，掌握好这十几个常用命令，你已经可以得心应手地使用 Git 了。</p><p>友情附赠 Git Cheat Sheet，建议收藏起来备用。</p><h2 id="git-basics" tabindex="-1">Git Basics <a class="header-anchor" href="#git-basics" aria-label="Permalink to &quot;Git Basics&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>git init &lt;directory&gt;</code></td><td style="text-align:left;">在指定的目录下创建一个空的 git repo。不带 <code>&lt;directory&gt;</code> 参数将在当前目录下创建。</td></tr><tr><td style="text-align:left;"><code>git clone &lt;repo&gt;</code></td><td style="text-align:left;">克隆一个指定 repo 到本地。指定的 <code>&lt;repo&gt;</code> 可以是本地文件系统或者由 HTTP 或 SSH 指定的远程路径。</td></tr><tr><td style="text-align:left;"><code>git config user.name &lt;name&gt;</code></td><td style="text-align:left;">针对当前 repo 配置用户名，使用 <code>--global</code> 将配置全局用户名。</td></tr><tr><td style="text-align:left;"><code>git add &lt;directory&gt;</code></td><td style="text-align:left;">将指定目录的所有修改假如到下一次 commit 中。把 <code>&lt;directory&gt;</code> 替换成 <code>&lt;file&gt;</code> 将添加指定文件的修改。</td></tr><tr><td style="text-align:left;"><code>git commit -m &quot;&lt;message&gt;&quot;</code></td><td style="text-align:left;">提交暂存区的修改，使用指定的 <code>&lt;message&gt;</code> 作为提交信息，而不是打开文件编辑器输入提交信息。</td></tr><tr><td style="text-align:left;"><code>git status</code></td><td style="text-align:left;">显示哪些文件已经被 staged、未被 staged 以及未跟踪（untracked）。</td></tr><tr><td style="text-align:left;"><code>git log</code></td><td style="text-align:left;">以缺省格式显示全部 commit 历史。</td></tr></tbody></table><h2 id="git-diff" tabindex="-1">Git Diff <a class="header-anchor" href="#git-diff" aria-label="Permalink to &quot;Git Diff&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>git diff</code></td><td style="text-align:left;">比较工作区和暂存区的修改。</td></tr><tr><td style="text-align:left;"><code>git diff HEAD</code></td><td style="text-align:left;">比较工作区和上一次 commit 后的修改。</td></tr><tr><td style="text-align:left;"><code>git diff --cached</code></td><td style="text-align:left;">比较暂存区和上一次 commit 后的修改。</td></tr></tbody></table><h2 id="undoing-changes" tabindex="-1">Undoing Changes <a class="header-anchor" href="#undoing-changes" aria-label="Permalink to &quot;Undoing Changes&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>git revert &lt;commit&gt;</code></td><td style="text-align:left;">对指定 <code>&lt;commit&gt;</code> 创建一个 undo 的 commit，并应用到当前分支。</td></tr><tr><td style="text-align:left;"><code>git reset &lt;file&gt;</code></td><td style="text-align:left;">将 <code>&lt;file&gt;</code> 从暂存区移除，但保持工作区不变。此操作不会修改工作区的任何文件。</td></tr></tbody></table><h2 id="rewriting-git-history" tabindex="-1">Rewriting Git History <a class="header-anchor" href="#rewriting-git-history" aria-label="Permalink to &quot;Rewriting Git History&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>git commit -m &quot;&lt;message&gt;&quot; --amend</code></td><td style="text-align:left;">将当前 staged 修改合并到最近一次的 commit 中。</td></tr><tr><td style="text-align:left;"><code>git rebase &lt;base&gt;</code></td><td style="text-align:left;">基于 <code>&lt;base&gt;</code> 对当前分支进行 rebase。<code>&lt;base&gt;</code> 可以是 commit、分支名称、tag 或相对于 HEAD 的 commit。</td></tr><tr><td style="text-align:left;"><code>git reflog</code></td><td style="text-align:left;">显示本地 repo 的所有 commit 日志。</td></tr></tbody></table><h2 id="git-branches" tabindex="-1">Git Branches <a class="header-anchor" href="#git-branches" aria-label="Permalink to &quot;Git Branches&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>git branch</code></td><td style="text-align:left;">显示本地 repo 的所有分支。</td></tr><tr><td style="text-align:left;"><code>git switch -c &lt;branch&gt;</code></td><td style="text-align:left;">创建并切换到一个新的名为 <code>&lt;barnch&gt;</code> 的分支。去掉 <code>-c</code> 参数将切换到一个已有分支。</td></tr><tr><td style="text-align:left;"><code>git merge &lt;branch&gt;</code></td><td style="text-align:left;">将指定 <code>&lt;branch&gt;</code> 分支合并到当前分支。</td></tr></tbody></table><h2 id="remote-repositories" tabindex="-1">Remote Repositories <a class="header-anchor" href="#remote-repositories" aria-label="Permalink to &quot;Remote Repositories&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>git remote add &lt;name&gt; &lt;url&gt;</code></td><td style="text-align:left;">添加一个新的远程连接。添加后可使用 <code>&lt;name&gt;</code> 作为指定 <code>&lt;url&gt;</code> 远程连接的名称。</td></tr><tr><td style="text-align:left;"><code>git fetch &lt;remote&gt; &lt;branch&gt;</code></td><td style="text-align:left;">从指定 <code>&lt;remote&gt;</code> 抓取指定 <code>&lt;branch&gt;</code> 的所有 commit 到本地 repo。去掉 <code>&lt;branch&gt;</code> 将抓取远程所有分支的修改。</td></tr><tr><td style="text-align:left;"><code>git pull &lt;remote&gt;</code></td><td style="text-align:left;">从指定 <code>&lt;remote&gt;</code> 抓取所有分支的 commit 并立刻合并到本地 repo。</td></tr><tr><td style="text-align:left;"><code>git push &lt;remote&gt; &lt;branch&gt;</code></td><td style="text-align:left;">将本地指定 <code>&lt;branch&gt;</code> 推送到指定远程 <code>&lt;remote&gt;</code>。如果远程没有对应的分支，将自动在远程创建此分支。</td></tr></tbody></table><h2 id="git-config" tabindex="-1">Git Config <a class="header-anchor" href="#git-config" aria-label="Permalink to &quot;Git Config&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>git config --global user.name &lt;name&gt;</code></td><td style="text-align:left;">配置当前用户名，使用 <code>--global</code> 参数将针对当前系统登录用户生效。</td></tr><tr><td style="text-align:left;"><code>git config --global user.email &lt;email&gt;</code></td><td style="text-align:left;">配置当前用户 Email。</td></tr><tr><td style="text-align:left;"><code>git config --global alias.&lt;alias-name&gt; &lt;git-command&gt;</code></td><td style="text-align:left;">配置一个 git 命令的快捷方式。例如，配置 <code>alias.glog log --graph --oneline</code>，使 <code>git glog</code> 相当于 <code>git log --graph --oneline</code>。</td></tr><tr><td style="text-align:left;"><code>git config --system core.editor &lt;editor&gt;</code></td><td style="text-align:left;">配置文本编辑器，例如 vi，在必要时自动打开此编辑器。</td></tr><tr><td style="text-align:left;"><code>git config --global --edit</code></td><td style="text-align:left;">打开当前用户的 git 全局配置并编辑。</td></tr></tbody></table><h2 id="git-log" tabindex="-1">Git Log <a class="header-anchor" href="#git-log" aria-label="Permalink to &quot;Git Log&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>git log --&lt;limit&gt;</code></td><td style="text-align:left;">限制 log 的显示数量。例如，<code>git log -5</code> 仅显示最新 5 条 commit。</td></tr><tr><td style="text-align:left;"><code>git log --oneline</code></td><td style="text-align:left;">每行显示一条 commit。</td></tr><tr><td style="text-align:left;"><code>git log --author=&quot;&lt;pattern&gt;&quot;</code></td><td style="text-align:left;">按提交者名字搜索并显示 commit。</td></tr><tr><td style="text-align:left;"><code>git log --grep=&quot;&lt;pattern&gt;&quot;</code></td><td style="text-align:left;">按指定内容搜索并显示 commit。</td></tr><tr><td style="text-align:left;"><code>git log &lt;since&gt;..&lt;until&gt;</code></td><td style="text-align:left;">显示指定范围的 commit。范围参数可以是 commit ID、分支名称、HEAD 或任意相对位置。</td></tr><tr><td style="text-align:left;"><code>git log -- &lt;file&gt;</code></td><td style="text-align:left;">仅显示包含指定文件修改的 commit。</td></tr><tr><td style="text-align:left;"><code>git log --graph</code></td><td style="text-align:left;">显示图形化的 branch 信息。</td></tr></tbody></table><h2 id="git-reset" tabindex="-1">Git Reset <a class="header-anchor" href="#git-reset" aria-label="Permalink to &quot;Git Reset&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>git reset</code></td><td style="text-align:left;">移除所有暂存区的修改，但不会修改工作区。</td></tr><tr><td style="text-align:left;"><code>git reset --hard</code></td><td style="text-align:left;">移除所有暂存区的修改，并强制删除所有工作区的修改。</td></tr><tr><td style="text-align:left;"><code>git reset &lt;commit&gt;</code></td><td style="text-align:left;">将当前分支回滚到指定 <code>&lt;commit&gt;</code>，清除暂存区的修改，但保持工作区状态不变。</td></tr><tr><td style="text-align:left;"><code>git reset --hard &lt;commit&gt;</code></td><td style="text-align:left;">将当前分支回滚到指定 <code>&lt;commit&gt;</code>，清除暂存区的修改，并强制删除所有工作区的修改。</td></tr></tbody></table><h2 id="git-rebase" tabindex="-1">Git Rebase <a class="header-anchor" href="#git-rebase" aria-label="Permalink to &quot;Git Rebase&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>git rebase -i &lt;base&gt;</code></td><td style="text-align:left;">以交互模式对当前分支做 rebase。</td></tr></tbody></table><h2 id="git-pull" tabindex="-1">Git Pull <a class="header-anchor" href="#git-pull" aria-label="Permalink to &quot;Git Pull&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>git pull --rebase &lt;remote&gt;</code></td><td style="text-align:left;">抓取所有远程分支，并以 rebase 模式并入本地 repo 而不是 merge。</td></tr></tbody></table><h2 id="git-push" tabindex="-1">Git Push <a class="header-anchor" href="#git-push" aria-label="Permalink to &quot;Git Push&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>git push &lt;remote&gt; --force</code></td><td style="text-align:left;">将本地分支推送到远程。不要使用 <code>force</code> 参数，除非你完全明白此操作的后果。</td></tr><tr><td style="text-align:left;"><code>git push &lt;remote&gt; --tags</code></td><td style="text-align:left;">使用 push 命令并不会自动将本地 tag 推送到远程。加上 <code>--tags</code> 参数会将所有本地 tag 推送到远程。</td></tr></tbody></table>',28)]))}const y=e(i,[["render",o]]);export{f as __pageData,y as default};
