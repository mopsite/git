import{_ as a,c as i,o as n,ag as p}from"./chunks/framework.B1Kupp1q.js";const k=JSON.parse('{"title":"忽略特殊文件","description":"","frontmatter":{"aside":false},"headers":[],"relativePath":"others/custom/ignore.md","filePath":"others/custom/ignore.md"}'),e={name:"others/custom/ignore.md"};function t(l,s,d,c,o,h){return n(),i("div",null,s[0]||(s[0]=[p(`<h1 id="忽略特殊文件" tabindex="-1">忽略特殊文件 <a class="header-anchor" href="#忽略特殊文件" aria-label="Permalink to &quot;忽略特殊文件&quot;">​</a></h1><p>有些时候，你必须把某些文件放到 Git 工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件等，每次 <code>git status</code> 都会显示 Untracked files，有强迫症的同学心里肯定不爽。</p><p>好在 Git 考虑到了大家的感受，这个问题解决起来也很简单，在 Git 工作区的根目录下创建一个特殊的 <code>.gitignore</code> 文件，然后把要忽略的文件名填进去，Git 就会自动忽略这些文件。</p><p>不需要从头写 <code>.gitignore</code> 文件，GitHub 已经为我们准备好了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线预览：<a href="https://github.com/github/gitignore" target="_blank" rel="noreferrer">https://github.com/github/gitignore</a>。</p><p>忽略文件的原则是：</p><ul><li>忽略操作系统自动生成的文件，比如缩略图等；</li><li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件没必要放进版本库，比如 Java 编译产生的 <code>.class</code> 文件；</li><li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li></ul><p>举个例子，假如你在 Windows 下进行 Python 开发，Windows 会自动在有图片的目录下生成隐藏的缩略图文件，如果有自定义目录，目录下就会有 Desktop.ini 文件，因此你需要忽略 Windows 自动生成的垃圾文件：</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-Y1LJz" id="tab-tyImEGN" checked><label data-title=".gitignore" for="tab-tyImEGN">.gitignore</label></div><div class="blocks"><div class="language- vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Windows:</span></span>
<span class="line"><span>Thumbs.db</span></span>
<span class="line"><span>ehthumbs.db</span></span>
<span class="line"><span>Desktop.ini</span></span></code></pre></div></div></div><p>然后，继续忽略 Python 编辑产生的 <code>.pyc</code>、<code>.pyo</code>、<code>dist</code> 等文件或目录：</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-SzkS2" id="tab-WCJ3IUq" checked><label data-title=".gitignore" for="tab-WCJ3IUq">.gitignore</label></div><div class="blocks"><div class="language- vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Python:</span></span>
<span class="line"><span>*.py[cod]</span></span>
<span class="line"><span>*.so</span></span>
<span class="line"><span>*.egg</span></span>
<span class="line"><span>*.egg-info</span></span>
<span class="line"><span>dist</span></span>
<span class="line"><span>build</span></span></code></pre></div></div></div><p>加上你自定义的文件，最终得到一个完整的 <code>.gitignore</code> 文件，内容如下：</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-MM-qV" id="tab-fDZ1eof" checked><label data-title=".gitignore" for="tab-fDZ1eof">.gitignore</label></div><div class="blocks"><div class="language- vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Windows:</span></span>
<span class="line"><span>Thumbs.db</span></span>
<span class="line"><span>ehthumbs.db</span></span>
<span class="line"><span>Desktop.ini</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Python:</span></span>
<span class="line"><span>*.py[cod]</span></span>
<span class="line"><span>*.so</span></span>
<span class="line"><span>*.egg</span></span>
<span class="line"><span>*.egg-info</span></span>
<span class="line"><span>dist</span></span>
<span class="line"><span>build</span></span>
<span class="line"><span></span></span>
<span class="line"><span># My configurations:</span></span>
<span class="line"><span>db.ini</span></span>
<span class="line"><span>deploy_key_rsa</span></span></code></pre></div></div></div><p>最后一步就是把 <code>.gitignore</code> 也提交到 Git，就完成了！当然，检验 <code>.gitignore</code> 的标准是 <code>git status</code> 命令是不是“working directory clean”。</p><p>使用 Windows 的同学注意了，如果你在资源管理器里新建一个 <code>.gitignore</code> 文件，它会非常弱智地提示你必须输入文件名，但是在文本编辑器里【保存】或者【另存为】就可以把文件保存为 <code>.gitignore</code> 了。</p><p>有些时候，你想添加一个文件到 Git，但发现添加不了，原因是这个文件被 <code>.gitignore</code> 忽略了：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> App.class</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">The</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> following</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> paths</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> are</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ignored</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> by</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> one</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .gitignore</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> files:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">App.class</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> if</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> you</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> really</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> want</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> them.</span></span></code></pre></div><p>如果你确实想添加该文件，可以用 <code>-f</code> 强制添加到 Git：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> App.class</span></span></code></pre></div><p>或者你发现，可能是 <code>.gitignore</code> 写得有问题，需要找出来到底是哪个规则写错了，可以用 <code>git check-ignore</code> 命令检查：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> check-ignore</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> App.class</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.gitignore:3:*.class</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	App.class</span></span></code></pre></div><p>Git 会告诉我们，<code>.gitignore</code> 的第 3 行规则忽略了该文件，于是我们就可以知道应该修订哪个规则。</p><p>还有些时候，当我们编写了规则排除了部分文件时：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 排除所有 . 开头的隐藏文件:</span></span>
<span class="line"><span>.*</span></span>
<span class="line"><span># 排除所有 .class 文件:</span></span>
<span class="line"><span>*.class</span></span></code></pre></div><p>我们会发现 <code>.*</code> 这个规则把 <code>.gitignore</code> 也排除了，并且 App.class 需要被添加到版本库里，但是被 <code>*.class</code> 规则排除了。</p><p>虽然可以用 <code>git add -f</code> 强制添加进去，但有强迫症的同学还是希望不要破坏 <code>.gitignore</code> 规则，这个时候，可以添加两条例外规则：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 排除所有.开头的隐藏文件:</span></span>
<span class="line"><span>.*</span></span>
<span class="line"><span># 排除所有.class文件:</span></span>
<span class="line"><span>*.class</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 不排除.gitignore和App.class:</span></span>
<span class="line"><span>!.gitignore</span></span>
<span class="line"><span>!App.class</span></span></code></pre></div><p>把指定文件排除在 <code>.gitignore</code> 规则外的写法就是 <code>!+文件名</code>，所以，只需把例外文件添加进去即可。</p><div class="warning custom-block"><p class="custom-block-title">小结</p><ul><li>忽略某些文件时，需要编写 <code>.gitignore</code>；</li><li><code>gitignore</code> 文件本身要放到版本库里，并且可以对 <code>.gitignore</code> 做版本管理。</li></ul></div>`,28)]))}const r=a(e,[["render",t]]);export{k as __pageData,r as default};
