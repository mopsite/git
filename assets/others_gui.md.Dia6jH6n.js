import{_ as t,c as r,o as a,ag as o}from"./chunks/framework.B1Kupp1q.js";const s="/git/assets/03.8CxNHPCJ.jpeg",i="/git/assets/04.C1AecV2j.png",p="/git/assets/05.Bu4xeOJ0.png",c="/git/assets/06.E9qsxpS6.png",l="/git/assets/07.Cfe5THWK.png",n="/git/assets/08.8WmtPCRc.png",d="/git/assets/09.BTlSEBUJ.png",G=JSON.parse('{"title":"GUI 工具","description":"","frontmatter":{},"headers":[],"relativePath":"others/gui.md","filePath":"others/gui.md"}'),m={name:"others/gui.md"};function u(g,e,_,h,S,f){return a(),r("div",null,e[0]||(e[0]=[o('<h1 id="gui-工具" tabindex="-1">GUI 工具 <a class="header-anchor" href="#gui-工具" aria-label="Permalink to &quot;GUI 工具&quot;">​</a></h1><p>当我们对 Git 的提交、分支已经非常熟悉，可以熟练使用命令操作 Git 后，再使用 GUI 工具，就可以更高效。</p><p>Git 有很多图形界面工具，这里我们推荐 <a href="https://www.sourcetreeapp.com" target="_blank" rel="noreferrer">Source Tree</a>，它是由 <a href="https://www.atlassian.com" target="_blank" rel="noreferrer">Atlassian</a> 开发的免费 Git 图形界面工具，可以操作任何 Git 库。</p><p>首先从下载 Source Tree 并安装，然后直接运行。</p><p>第一次运行时，Source Tree 并不知道我们的 Git 库在哪。如果本地已经有了 Git 仓库，直接从资源管理器把文件夹拖拽到 Source Tree 上，就添加了一个本地 Git 库：</p><p><img src="'+s+'" alt="03"></p><p>也可以选择【New】→【Clone from URL】直接从远程克隆到本地。</p><h2 id="提交" tabindex="-1">提交 <a class="header-anchor" href="#提交" aria-label="Permalink to &quot;提交&quot;">​</a></h2><p>我们双击 learngit 这个本地库，Source Tree 会打开另一个窗口，展示这个 Git 库的当前所有分支以及文件状态。选择左侧面板的【RORKSPACE】→【File status】，右侧会列出当前已修改的文件（Unstaged files）：</p><p><img src="'+i+'" alt="04"></p><p>选中某个文件，该文件就自动添加到【Staged files】，实际上是执行了 <code>git add README.md</code> 命令：</p><p><img src="'+p+'" alt="05"></p><p>然后，我们在下方输入 Commit 描述，点击【Commit】，就完成了一个本地提交：</p><p><img src="'+c+'" alt="06"></p><p>实际上是执行了 <code>git commit -m &quot;update README.md&quot;</code> 命令。</p><p>使用 Source Tree 进行提交就是这么简单，它的优势在于可以可视化地观察文件的修改，并以红色和绿色高亮显示。</p><h2 id="分支" tabindex="-1">分支 <a class="header-anchor" href="#分支" aria-label="Permalink to &quot;分支&quot;">​</a></h2><p>在左侧面板的【BRANCHES】下，列出了当前本地库的所有分支。当前分支会加粗并用 <code>o</code> 标记。要切换分支，我们只需要选择该分支，例如 master，然后点击右键，在弹出菜单中选择【Checkout master】，实际上是执行命令 <code>git checkout master</code>：</p><p><img src="'+l+'" alt="07"></p><p>要合并分支，同样选择待合并分支，例如 dev，然后点击右键，在弹出菜单中选择【Merge dev into master】，实际上是执行命令 <code>git merge dev</code>：</p><p><img src="'+n+'" alt="08"></p><h2 id="推送" tabindex="-1">推送 <a class="header-anchor" href="#推送" aria-label="Permalink to &quot;推送&quot;">​</a></h2><p>在 Source Tree 的工具栏上，分别有【Pull】和【Push】，分别对应命令 <code>git pull</code> 和 <code>git push</code>，只需注意本地和远程分支的名称要对应起来，使用时十分简单。</p><p>注意到使用 Source Tree 时，我们只是省下了敲命令的麻烦，Source Tree 本身还是通过 Git 命令来执行任何操作。如果操作失败，Source Tree 会自动显示执行的 Git 命令以及错误信息，我们可以通过 Git 返回的错误信息知道出错的原因：</p><p><img src="'+d+'" alt="09"></p><div class="warning custom-block"><p class="custom-block-title">小结</p><p>使用 Source Tree 可以以图形界面操作 Git，省去了敲命令的过程，对于常用的提交、分支、推送等操作来说非常方便。</p><p>Source Tree 使用 Git 命令执行操作，出错时，仍然需要阅读 Git 命令返回的错误信息。</p></div>',26)]))}const C=t(m,[["render",u]]);export{G as __pageData,C as default};
