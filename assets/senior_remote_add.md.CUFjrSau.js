import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.B1Kupp1q.js";const e="/git/assets/03.CadTEG1O.png",p="/git/assets/04.CzSIZTUL.png",h="/git/assets/05.B8GA7fcv.png",y=JSON.parse('{"title":"添加远程仓库","description":"","frontmatter":{},"headers":[],"relativePath":"senior/remote/add.md","filePath":"senior/remote/add.md"}'),l={name:"senior/remote/add.md"};function k(r,s,d,F,g,o){return t(),a("div",null,s[0]||(s[0]=[n('<h1 id="添加远程仓库" tabindex="-1">添加远程仓库 <a class="header-anchor" href="#添加远程仓库" aria-label="Permalink to &quot;添加远程仓库&quot;">​</a></h1><p>现在的情景是，你已经在本地创建一个 Git 仓库后，又想在 GitHub 创建一个 Git 仓库，并且让这两个仓库进行远程同步，这样，GitHub 上的仓库既可以作为备份，又可以让其他人通过该仓库来写作，真是一举多得。</p><p>首先，登录 GitHub，然后，在右上角找到【Create a new repo】按钮，创建一个新的仓库：</p><p><img src="'+e+'" alt="03"></p><p>在 Repository name 填入 learngit，其他保持默认设置，点击【Create repository】按钮，就成功创建了一个新的 Git 仓库：</p><p><img src="'+p+`" alt="04"></p><p>目前，在 GitHub 上的这个 learngit 仓库还是空的，GitHub 告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到 GitHub 仓库。</p><p>现在，我们根据 GitHub 的提示，在本地的 learngit 仓库下运行命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@github.com:michaelliao/learngit.git</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">注意</p><p>把上面的 michaelliao 替换成你自己的 GitHub 账户名，否则，你在本地关联的就是我的远程仓库。关联没有问题，但是你以后推送是推不上去的，因为你的 SSH Key 公钥不再我的账户列表中。</p></div><p>添加后，远程库的名字就是 orgin，这是 Git 默认的叫法，也可以改成别的，但是 origin 这个名字一看就知道是远程库。</p><p>下一步，就可以把本地库的所有内容推送到远程库上：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Counting</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> objects:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 20,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> done.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Delta</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compression</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> using</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> threads.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Compressing</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> objects:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 100%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (15/15), done.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Writing</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> objects:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 100%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (20/20), 1.64 KiB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 560.00</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> KiB/s,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> done.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Total</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (delta </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), reused 0 (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">delta</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remote:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Resolving</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deltas:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 100%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (5/5), done.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">To</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> github.com:michaelliao/learngit.git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [new </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">branch]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      master</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Branch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;master&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> track</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;master&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;origin&#39;.</span></span></code></pre></div><p>把本地库的内容推送到远程，用 <code>git push</code> 命令，实际上是把当前分支 master 推送到远程。</p><p>由于远程库是空的，我们第一次推送 master 分支时，加上了 <code>-u</code> 参数，Git 不但会把本地的 master 分支内容推送到远程新的 master 分支，还会把本地的 master 分支和远程的 master 分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><p>推送成功后，可以立刻在 GitHub 页面中看到远程库的内容已经和本地一模一样：</p><p><img src="`+h+`" alt="05"></p><p>从现在起，只要本地做了提交，就可以通过命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span></code></pre></div><p>把本地 master 分支的最新修改推送至 GitHub，现在，你就拥有了真正的分布式版本库！</p><h2 id="ssh-警告" tabindex="-1">SSH 警告 <a class="header-anchor" href="#ssh-警告" aria-label="Permalink to &quot;SSH 警告&quot;">​</a></h2><p>当你第一次使用 Git 的 <code>clone</code> 或者 <code>push</code> 命令连接 GitHub 时，会得到一个警告：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>The authenticity of host &#39;github.com (xx.xx.xx.xx)&#39; can&#39;t be established.</span></span>
<span class="line"><span>RSA key fingerprint is xx.xx.xx.xx.xx.</span></span>
<span class="line"><span>Are you sure you want to continue connecting (yes/no)?</span></span></code></pre></div><p>这是因为 Git 使用 SSH 连接，而 SSH 连接在第一次验证 GitHub 服务器的 Key 时，需要你确认 GitHub 的 Key 指纹信息是否真的来自 GitHub 服务器，输入 yes 回车即可。</p><p>Git 会输出一个警告，告诉你已经把 GitHub 的 Key 添加到本地的一个信任列表里了：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Warning: Permanently added &#39;github.com&#39; (RSA) to the list of known hosts.</span></span></code></pre></div><p>这个警告只会出现一次，后面的操作就不会有任何警告了。</p><p>如果你实在担心有人冒充 GitHub 服务器，输入 yes 前可以对照 <a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/githubs-ssh-key-fingerprints" target="_blank" rel="noreferrer">GitHub 的 RSA Key 指纹信息</a>是否与 SSH 连接给出的一致。</p><h2 id="删除远程库" tabindex="-1">删除远程库 <a class="header-anchor" href="#删除远程库" aria-label="Permalink to &quot;删除远程库&quot;">​</a></h2><p>如果添加的时候地址写错了，或者就是想删除远程库，可以用 <code>git remote rm &lt;name&gt;</code> 命令。使用前，建议先用 <code>git remote -v</code> 查看远程库信息：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  git@github.com:michaelliao/learn-git.git</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (fetch)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  git@github.com:michaelliao/learn-git.git</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (push)</span></span></code></pre></div><p>然后根据名字删除比如删除 origin：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span></span></code></pre></div><p>此处的“删除”其实是解除了本地和远程的绑定关系，并不是物理上删除了远程库，远程库本身并没有任何改动。要真正删除远程库，需要登录到 GitHub，在后台页面找到删除按钮再删除。</p><div class="warning custom-block"><p class="custom-block-title">小结</p><p>要关联一个远程库，使用命令 <code>git remote add origin git@server-name:path/repo-name.git</code>；</p><p>关联一个远程库时必须给远程库指定一个名字，origin 是默认习惯命名；</p><p>关联后，使用命令 <code>git-push -u origin master</code> 第一次退欧是哪个 master 分支的所有内容；</p><p>此后，每次本地提交后，只要有必要，就可以使用命令 <code>git push origin master</code> 推送新修改。</p><p>分布式版本系统的最大好处之一是本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而 SVN 在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！</p></div>`,35)]))}const C=i(l,[["render",k]]);export{y as __pageData,C as default};
